// d250 is raspberry pi installed on my 250g drone.
// Configuration for 3S battery pack.
/*
	All values here are in SI units, i.e. meters, seconds, meter/second, etc.
	All angles are in radians, i.e. radians, radians/second, etc.

        ordering of motors shall be:
       
        front side of the drone
       
          3       0
           \     /
            --^--
            |   |
            -----
           /     \
          2       1
       

*/

// This file is preprocessed by C preprocessor before being read by raspilot, you
// can use preprocessor directives like #define and #if.
// File format is an "extended" JSON which is JSON where field names can be used without quotes,
// comma can occur after the last field and constant expressions can be used instead of constants.

#define PI 3.1415926
#define RATE 200
{
    autopilot_loop_Hz: RATE,
    stabilization_loop_Hz: RATE,
    
    motor_number:          4,
    motor_yaw_forces:	   [-1,  1, -1,  1],
    motor_pitch_forces:	   [ 1, -1, -1,  1],
    motor_roll_forces:	   [-1, -1,  1,  1],
    
    // What we call "long buffer" is the buffer of poses used to "smooth" or "average"
    // noise. We use linear regression of buffered values to get current pose.
    // The size of long buffer is in seconds. If you have good sensors you can put smaller numbers.
    // If all your sensors are noisy you have to put larger value.
    // Similarly, there is a "short buffer" storing roll and pitch used to stabilize drone. This is usualy shorter then "large buffer"
    // because stabilization requires less latency.
    // Buffer_seconds must be larger than 1 tick which is 1/stabilization_loop_Hz.
    long_buffer_seconds:	   0.2,
    short_buffer_seconds:	   4/RATE,

    // waypoint shall not be lower than this altitude
    drone_min_altitude:            0.01,
    
    // waypoint shall not be higher than this altitude.
    drone_max_altitude:            1.00, 
    
    // waypoint is considered as reached when the drone happens to be within that distance and orientation range
    drone_waypoint_reached_range:    0.05,
    drone_waypoint_reached_angle:    0.20,

    // This is the time in which autopilots wants to reach target roll and pitch orientation. 
    // Smaller values make drone more "nervous" more precise but you may reach drone physical
    // limits.
    pilot_reach_goal_orientation_time:	0.3,
    
    // This is the time in which autopilots wants to reach target position.
    // This time must be at least double of "pilot_reach_goal_orientation_time" because in our simple model
    // the drone first gets "go to target" orientation, then it moves to the half way, then it gets "braking"
    // orientation and makes another half way while braking to zero velocity at target position.
    // larger values make the drone more stable and less "nervous".
    pilot_reach_goal_position_time:	1.0,

    // While moving between waypoints the autopilot is constrained by the following values.
    // max speed contains also vertical speed, that's why there is higher number
    drone_max_speed: 		   5.0,
    drone_max_rotation_speed:	   PI/2,
    drone_max_inclination:	   PI/4,

    // drone_panic_inclination is a security value. It is the inclination at which drone turns off to avoid damages.
    drone_panic_inclination:	   PI/2,

    // minimal spin, i.e. the spin during "warning rotations" before launch
    motor_thrust_min_spin:         0.01,
    
    // Maximal value sent to motor for holding altitude. With the right value the drone gently lands when the battery is empty.
    motor_altitude_thrust_max:     0.16,
    
    //////////////////////////////////////////////
    // PID controllers.
    
    // There are three sorts of PID controllers in raspilot. The first sort are PidX and PidY controllers
    // managing how much the autopilot is pushing on the movement in X,Y coordinates. Values [1,0,0] means that the autopilot
    // does not push at all. It is perfectly OK to use those values ([1,0,0]) for non-windy weather, perfectly
    // equilibrated drone and flying in the interior or during the calibration of the drone.
    // You configure the same values for both PidX and PidY controllers.

    // pidXY:        { p:1.00,  i:00,  d:0.000 },
    pidXY:        { p:1.0,  i:0.1,  d:0.000 },

    // The second sort of PID controllers translates the desired drone roll pitch yaw rotation to motor thrust
    // (i.e. to a value between 0 and 1). 

#define RPB 0.2

    pidRoll:     { p:RPB,  i:RPB/10,  d:0.00002},
    pidPitch:    { p:RPB,  i:RPB/10,  d:0.00002},
    pidYaw:      { p:0.5,  i:0.3,  d:0.00001},

    // The last sort of PID controller is pidAltitude. It translates desired vertical speed (usually 0)
    // to motor thrust. It shall have P factor large enough to launch and stabilize the drone altitude.
    // In order not to start I part from zero we have added a CI constant to start I value at some previously
    // determined constant value. Check your value with different levels of battery. The I factor in this
    // case accumulates the difference between fully charged and "nearly empty" batteries. BTW it is used by
    // raspilot to determine the status of the battery.

    //pidAltitude: { p:0.,  i:0.0,  d:0, ci:0 },
    //pidAltitude: { p:0.1,  i:0.3,  d:0.00001, ci:0.20 },
    pidAltitude: { p:0.05,  i:0.06,  d:0.000, ci:0.10 },



    /////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    // Following part of the configuration defines sensors and other devices installed on the drone and
    // connected either by a shared memory or Linux pipes.

    device: [

	{
	    name: "motors",
	    connection : {
	    	// direct dshot connection of ESC to raspberry pi pinouts. Numeric arguments of motor-dshot are gpio pins where ESC is connected.
		type: "DCT_COMMAND_BASH",
		command: "killall motor-dshot-smi; sleep 0.5; killall -q -9 motor-dshot-smi; sleep 0.5; ulimit -c unlimited; exec chrt -f 99 taskset -c 1 ../tool/motor/motor-dshot-smi/motor-dshot-smi - - 21 16 20 19 "
		// command: "killall motor-null; sleep 0.5; killall -q -9 motor-null; sleep 0.5; ulimit -c unlimited; exec chrt -f 99 taskset -c 1 ../tool/motor/motor-null/motor-null - - 21 16 20 19 "
	    },
	    shutdownExit: true,
	    stream: [
	    	// sending
		{ type:"DT_PING",       tag: "ping",  debug_level: 10},
		{ type:"DT_THRUST",     tag: "mt4",   debug_level: 10},
		// reading
		{ type:"DT_PONG",	tag: "pong",  debug_level: 10},
		{ type:"DT_DEBUG", 	tag: "debug", debug_level: 110},
	    ],
	},

#if 1
	{
	    name: "gyro-mpu6050-magwick-shm",
	    connection : {
		type: "DCT_COMMAND_BASH",
		command: "killall -q -9 mpu6050-shm; sleep 0.5; exec chrt -r 10 taskset -c 3 ../tool/imu/mpu6050/magwick/mpu6050-shm -s -r 1000 /dev/i2c-1",
	    },
	    warming_time: 15.0,
	    // positive roll in mount_rpy makes left side up
	    // positive pitch in mount_rpy makes nose up
	    //mount_rpy: [0.098, 0.05, 0],
	    mount_rpy: [-0.13, -0.06, 0],
            stream: [
		{ type: "DT_ORIENTATION_RPY_SHM", tag: "rpy",  weight: [1.0, 1.0, 1.0], mandatory:1, drift_auto_fix_period:[0,0,0.5], history_size:16, latency: 0.001, debug_level: 88},
		{ type: "DT_DEBUG",           tag: "debug", debug_level: 22},
            ],
	},
#endif

#if 1
	{
	    name: "matek-3901-l0x",
	    connection : {
		type: "DCT_COMMAND_BASH",
		command: "killall matek-3901-l0x; sleep 0.5; killall -q -9 matek-3901-l0x; sleep 0.5; exec chrt -r 10 taskset -c 3 ../tool/flow/matek-3901-L0X/matek-3901-l0x /dev/serial0",
	    },
	    data_ignore_unknown_tags: true,
	    mount_position: [0.04, -0.01, -0.01],
            stream: [
		{ type: "DT_BOTTOM_RANGE",   tag: "range", weight: 1.0, mandatory:1, min_range:0.05, max_range:1.8, history_size:16, latency: 0.02, debug_level: 88},
		// Strangely, for history size 2 FLOW_XY diverges completely. For other values it doesn't.
		// { type: "DT_FLOW_XY",        tag: "motion", weight: 0.01, mandatory:1, history_size:3, debug_level: 88},
		{ type: "DT_DEBUG",          tag: "debug", debug_level: 22},
            ],
	},
#endif

#if 0
	{
	    name: "apriltag",
	    connection : {
		type: "DCT_COMMAND_BASH",
		command: "taskset -c 3 ssh vittek@192.168.1.124 /home/vittek/dev/raspiapril/src/raspiapril -s 0.053",
	    },
	    // supposing apriltag reports the position to the middle of the tag
	    mount_position: [0, 0, 0],
	    warming_time: 1.0,
            stream: [
		{ type: "DT_POSITION_VECTOR",      tag: "pose:",  mandatory:1, weight: [1.0, 1.0, 1e-10], history_size:2, latency: 0.1, debug_level: 88},
		// { type: "DT_POSITION_VECTOR",      tag: "pose:",  mandatory:1, weight: [0.0001, 0.0001, 0.0001], history_size:20, latency: 0.10, debug_level: 88},
		{ type: "DT_ORIENTATION_RPY", 	   tag: "rpy:", weight: [1e-20, 1e-20, 1], mandatory:1, history_size:10, latency: 0, debug_level: 88},
		{ type: "DT_VOID",                 tag: "lat:", debug_level: 1},
		{ type: "DT_DEBUG",                tag: "debug", debug_level: 22},
            ],
	},
#endif

#if 1
	{
	    name: "joystick",
	    connection : {
		type: "DCT_COMMAND_BASH",
		command: "taskset -c 3 ssh vittek@192.168.1.100 jstest --event /dev/input/js0"
	    },
            stream: [
		// TODO: Implement something so that I can set "mandatory:1" for joystick
		{ type: "DT_JSTEST", tag: "Event:", weight: 1.0, history_size:3, debug_level: 1},
            ],
	},

	{
	    name: "zeropose",
	    connection : {
		type: "DCT_INTERNAL_ZEROPOSE",
	    },
            stream: [
		{ type: "DT_POSITION_VECTOR",        tag: "position", weight: 1e-100, debug_level: 1},
            ],
	},
#endif

#if 0
	{
	    name: "camera",
	    connection : {
		type: "DCT_COMMAND_BASH",
		// command: "libcamera-vid -t 0 --width 1024 --height 768 --inline --listen -v0 -o tcp://0.0.0.0:5000"
		// to be viewed on pc by ffplay tcp://pifly:5000 -vf "setpts=N/30" -fflags nobuffer -flags low_delay -framedrop
		// to be saved with ffmpeg -i tcp://pifly:5000  pifly.mp4
		// or saving directly on rpi
		command: "libcamera-vid --width 1920 --height 1080 -o video.h264 -t 0"
	    },
            stream: [
		// TODO: Implement something so that I can set "mandatory:1" for joystick
		{ type: "DT_VOID",                 tag: "lat:", debug_level: 111},
            ],
	},
#endif
],
    
}
