/*
	All values here are in SI units, i.e. meters, seconds, meter/second, etc.
	All angle related values are in radians, i.e. radians, radians/second, etc.

        ordering of motors shall be:
       
        front side of the drone
       
          3       0
           \     /
            --^--
            |   |
            -----
           /     \
          2       1
       

*/

// This file is preprocessed by C preprocessor before being read by raspilot, this
// allows us to use some of preprocessor directives like #define and #if.
// File format is an "extended" JSON which is JSON format where field names can be used without quotes,
// comma can occur after the last field and constant expressions instead of constants.

#define PI 3.1415926

{
    // piw is my hexsoon drone

    pilot_main_mode: "MODE_SINGLE_MISSION",    

    motor_number:          4,

    autopilot_loop_Hz: 50,
    stabilization_loop_Hz: 50,
    
    motor_yaw_forces:	   [-1,  1, -1,  1],
    motor_pitch_forces:	   [ 1, -1, -1,  1],
    motor_roll_forces:	   [-1, -1,  1,  1],

    short_history_seconds:	   0.05,
    drone_min_altitude:            0.01,
    drone_max_altitude:            1.00, 
    
    drone_waypoint_reached_range:    0.03,
    drone_waypoint_reached_angle:    0.10,

    pilot_reach_goal_orientation_time:	0.3,
    pilot_reach_goal_position_time:	0.7,

    drone_max_speed: 		   0.5,
    drone_max_rotation_speed:	   PI/4,
    drone_max_inclination:	   PI/4,

    motor_thrust_min_spin:         0.005,
    motor_altitude_thrust_hold:	   0.28,
    
    //////////////////////////////////////////////
    // PID controllers.
    
    pidXY:       { p:1.0,  i:0.0,  d:0.0 },
    pidRoll:     { p:0.10,  i:0.00,  d:0.0010, ci: 0.0060 },
    pidPitch:    { p:0.10,  i:0.00,  d:0.0010, ci: 0.0033 },
    pidYaw:      { p:0.20,  i:0.00,  d:0.0015, ci:-0.0314 },
    pidAltitude: { p:0.40,  i:0.10,  d:0.0100, /* ci:0.28 */ },

    //////////////////////////////////////////////
    // sensors and other devices installed on the drone and connected through pipes

    device: [
	{
	    name: "motors",
	    connection : {
#if 1
		// direct PWM connection of ESC to raspberry pi pinouts
		type: "DCT_COMMAND_BASH",
		command: "killall motor-pigpio; sleep 0.5; killall -q -9 motor-pigpio; sleep 0.5; exec chrt -o 0 taskset -c 1 ../tool/motor/motor-pigpio-pwm/motor-pigpio - - 8 25 24 23"
#else		
		// PWM extension board with pca9685 chip
		type: "DCT_COMMAND_BASH",
		command: "killall motor-pca9685; sleep 0.5; killall -q -9 motor-pca9685; sleep 0.5; exec chrt -o 0 taskset -c 1 ../tool/motor/motor-pca9685/motor-pca9685 - - 3 2 10 11"
#endif		
	    },
	    stream: [
	    	// sending
		{ type:"DT_PING",       tag: "ping",  debug_level: 10},
		{ type:"DT_THRUST",     tag: "mt4",   debug_level: 10},
		// { type:"DT_THRUST_SHM", debug_level: 110},
		// reading
		{ type:"DT_PONG",	tag: "pong",  debug_level: 88},
		{ type:"DT_DEBUG", 	tag: "debug", debug_level: 110},
	    ],
	},
	
	{
	    name: "imu-t265",
	    connection : {
		type: "DCT_COMMAND_BASH",
		command: "killall -q -9 rs-pose; sleep 0.5; exec chrt -o 0 taskset -c 2 ../tool/librealsense/build/examples/pose/rs-pose",
	    },
	    // For devices returning position, it is supposed that they return position of the sensor, not the position of the drone.
	    // In such a case you shall specify where the sensor is placed relative to the center of the gravity of the drone.
	    // Similarly you shall specify orientation (as roll, pitch yaw) of the sensor compared to orientation of the drone.
	    mount_position: [0, 0, -0.10],
	    mount_rpy: [-0.010, 0.006, 0],
            stream: [
		{ type: "DT_ORIENTATION_RPY", tag: "rpy",  mandatory:1, weight: 1.0, debug_level: 22},
		{ type: "DT_POSITION_VECTOR", tag: "pose",  mandatory:1, weight: 1.0, debug_level: 22},
		{ type: "DT_DEBUG",           tag: "debug", debug_level: 1},
            ],
	},
	
	],
    
}
